{"version":3,"sources":["../src/index.ts"],"names":["Showdown","Prism","Module","pkg","decode","require","loadLanguages","lang","text","m","defaultTheme","showdownPrism","options","langs","theme","params","replacement","wholematch","match","left","right","lan","highlighted","converter","scriptTag","src_default"],"mappings":"AAoBA,OAAOA,MAAc,WAErB,OAAOC,MAAW,UAClB,OAAOC,MAAY,cACnB,OAAOC,MAAS,KAChB,GAAM,CAAE,OAAAC,CAAO,EAAID,EAGbE,EAAUH,EAAO,cAAc,YAAY,GAAG,EAC9CI,EAAgBD,EAAQ,qBAAqB,EAE7CE,EAAQC,GAAyB,CACnC,IAAMC,EAAID,EAAK,MAAM,iBAAiB,EACtC,OAAOC,EAAIA,EAAE,CAAC,EAAI,EACtB,EAwDA,IAAMC,EAAuB,UA0CvBC,EACFC,GAC0C,CAC1C,IAAMC,EAAkBD,GAAS,WAAa,CAAC,EAEzCE,EAAgBF,GAAS,OAAS,GAAGF,CAAY,GACvDJ,EAAcO,CAAK,EAEnB,IAAME,EAAS,CACX,KAAM,sBACN,MAAO,gBACP,MAAO,GACX,EACMC,EAAc,CAChBC,EACAC,EACAC,EACAC,IACC,CACDF,EAAQd,EAAOc,CAAK,EACpB,IAAMG,EAAMd,EAAKY,CAAI,EACrB,GAAIE,IAAQ,GAAI,CACZF,EAAO,wBAAwBE,CAAG,2BAA2BA,CAAG,KAChED,EAAQ,gBACR,IAAME,EAAcrB,EAAM,UACtBiB,EACAjB,EAAM,UAAUoB,CAAG,EACnBA,CACJ,EACA,OAAOF,EAAOG,EAAcF,CAChC,KACI,QAAOH,CAEf,EAEA,MAAO,CACH,CACI,KAAM,SAMN,OAAQ,CACJT,EACAe,EACAX,IAEOZ,EAAS,OAAO,uBACnBQ,EACAQ,EACAD,EAAO,KACPA,EAAO,MACPA,EAAO,KACX,CAER,EACA,CACI,KAAM,SACN,OAAQ,CACJP,EACAe,EACAX,IACC,CACD,IAAMY,EAAY;AAAA;AAAA;AAAA,qGAGmEV,CAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAS1F,OAAON,EAAOgB,CAClB,CACJ,CACJ,CACJ,EAEAxB,EAAS,UAAU,gBAAiBW,EAAc,CAAC,EAEnD,IAAOc,EAAQd","sourcesContent":["//2024 May 8 , at Taungyi , Myanmar\n/** \n   \n   @license\n\n   Copyright [2024] [Pho Thin Maung]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\n\nimport Showdown from \"showdown\";\nimport type { ShowdownExtension } from \"showdown\";\nimport Prism from \"prismjs\";\nimport Module from \"node:module\";\nimport pkg from \"he\";\nconst { decode } = pkg;\n\n//\nconst require = Module.createRequire(import.meta.url);\nconst loadLanguages = require(\"prismjs/components/\");\n\nconst lang = (text: string): string => {\n    const m = text.match(/class=\"([^\" ]+)/);\n    return m ? m[1] : \"\";\n};\nexport type ThemeType =\n    | \"actom-dark\"\n    | \"cb\"\n    | \"coldark-dark\"\n    | \"dark\"\n    | \"holi-theme\"\n    | \"duotone-earth\"\n    | \"duotone-forest\"\n    | \"duotone-light\"\n    | \"duotone-sea\"\n    | \"duotone-space\"\n    | \"funky\"\n    | \"ghcolors\"\n    | \"gruvbox-light\"\n    | \"laserwave\"\n    | \"lucario\"\n    | \"night-owl\"\n    | \"okaidia\"\n    | \"one-dark\"\n    | \"one-light\"\n    | \"solarized-dark-atom\"\n    | \"synthwave84\"\n    | \"tomorrow\"\n    | \"twilight\"\n    | \"vs\"\n    | \"vsc-dark-plus\"\n    | \"z-touch\";\nconst themes: string[] = [\n    \"actom-dark\",\n    \"cb\",\n    \"coldark-dark\",\n    \"dark\",\n    \"holi-theme\",\n    \"duotone-earth\",\n    \"duotone-forest\",\n    \"duotone-light\",\n    \"duotone-sea\",\n    \"duotone-space\",\n    \"funky\",\n    \"ghcolors\",\n    \"gruvbox-light\",\n    \"laserwave\",\n    \"lucario\",\n    \"night-owl\",\n    \"okaidia\",\n    \"one-dark\",\n    \"one-light\",\n    \"solarized-dark-atom\",\n    \"synthwave84\",\n    \"tomorrow\",\n    \"twilight\",\n    \"vs\",\n    \"vsc-dark-plus\",\n    \"z-touch\",\n];\nconst defaultTheme: string = \"okaidia\";\n\nexport interface ShowdownPrismOptions {\n    languages?: string[];\n    theme?: ThemeType;\n}\n\n/**\n * A Showdown extension for Prism.js.\n * ---\n * This extension adds syntax highlighting to code blocks in markdown documents\n * using Prism.js. This extension is meant to be used with the Showdown library.\n * \n * \n * **Options** \n * \n * **1.languages ? :  string[ ]**\n * \n   - Prismjs will load the default languages: markup, css, clike and javascript.\n\n   - You can load more languages with the `options.languages`.\n        If you use Webpack or another bundler , do not set `options.languages`.\n * \n * **2.theme ? : string**\n *   \n * - Available themes can be see in README.md\n\n\n * @example\n * \n * import showdown from \"showdown\";\n        import showdownprism from \"showdown-prism\";\n        // Add extension to showdown options\n        const converter = new showdown.Converter({\n        extensions: [showdownPrism({\n                    languages: [\"bash\"],\n                    theme: \"holi-theme\",\n                }),],\n        });\n        // Convert to HTML\n        const convertedContent = converter.makeHtml(\"Markdown_contents\")\n */\nconst showdownPrism = (\n    options?: ShowdownPrismOptions\n): ShowdownExtension | ShowdownExtension[] => {\n    const langs: string[] = options?.languages ?? [];\n\n    const theme: string = options?.theme ?? `${defaultTheme}`;\n    loadLanguages(langs);\n\n    const params = {\n        left: \"<pre><code\\\\b[^>]*>\",\n        right: \"</code></pre>\",\n        flags: \"g\",\n    };\n    const replacement = (\n        wholematch: string,\n        match: string,\n        left: string,\n        right: string\n    ) => {\n        match = decode(match);\n        const lan = lang(left);\n        if (lan !== \"\") {\n            left = `<pre class=\"language-${lan}\"><code class=\"language-${lan}\">`;\n            right = `</code></pre>`;\n            const highlighted = Prism.highlight(\n                match,\n                Prism.languages[lan],\n                lan\n            );\n            return left + highlighted + right;\n        } else {\n            return wholematch;\n        }\n    };\n\n    return [\n        {\n            type: \"output\",\n\n            /**\n             * A function that filters the given text using the Showdown helper's replaceRecursiveRegExp method.\n             *\n             */\n            filter: (\n                text: string,\n                converter: Showdown.Converter,\n                options: any\n            ): string => {\n                return Showdown.helper.replaceRecursiveRegExp(\n                    text,\n                    replacement,\n                    params.left,\n                    params.right,\n                    params.flags\n                );\n            },\n        },\n        {\n            type: \"output\",\n            filter: (\n                text: string,\n                converter: Showdown.Converter,\n                options: any\n            ) => {\n                const scriptTag = `\n                <script>\n                function loadTheme(){\n                 const themeLink = \\`https://cdn.jsdelivr.net/gh/phothinmg/prism-themes@main/theme/${theme}.min.css\\`;\n                 const themeEl = window.document.createElement(\"link\");\n                themeEl.setAttribute(\"rel\", \"stylesheet\");\n                themeEl.setAttribute(\"href\", themeLink);\n                window.document.head.appendChild(themeEl);\n                };\n                loadTheme();\n                </script>\n                `;\n                return text + scriptTag;\n            },\n        },\n    ];\n};\n\nShowdown.extension(\"showdownPrism\", showdownPrism());\n\nexport default showdownPrism;\n"]}