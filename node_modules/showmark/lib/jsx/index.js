import { transformFromAstSync } from "@babel/core";
import { parse } from "@babel/parser";
import { Converter } from "../converter/index.js";
/**
 * Compiles markdown content into JSX content.
 * @param content The markdown content to be compiled.
 * @param compilerOptions Options for the compiler. See {@link JSXCompilerOptions}.
 * @param converterOptions Options for the markdown converter. See {@link ShowMarkOptions}.
 * @returns An object with the compiled code, source map, and metadata.
 */
var jsxCompiler = function (content, compilerOptions, converterOptions) {
    var _a, _b, _c;
    var _html = new Converter(content, converterOptions).cleanHtml;
    var _className = (_a = compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.className) !== null && _a !== void 0 ? _a : "prose dark:prose-invert";
    var _jsxSource = (_b = compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.jsxSource) !== null && _b !== void 0 ? _b : "react";
    var _fileName = (_c = compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.fileName) !== null && _c !== void 0 ? _c : "compiled.js";
    var _jsxReact = "\n  export default function MarkdownContent(){\n    return (\n      <div className=\"".concat(_className, "\">\n        ").concat(_html, "\n      </div>\n    )\n  }\n  ");
    var _jsxPreact = "\n  /** @jsx Preact.h */\n  import Preact from \"preact\";\n\n   export default function MarkdownContent(){\n    return (\n      <div class=\"".concat(_className, "\">\n        ").concat(_html, "\n      </div>\n    )\n  }\n  ");
    var _jsxContent = _jsxSource === "preact" ? _jsxPreact : _jsxReact;
    var parsedAst = parse(_jsxContent, {
        sourceType: "module",
        plugins: ["jsx", "typescript"],
    });
    //
    var result = transformFromAstSync(parsedAst, _jsxContent, {
        filename: _fileName,
        presets: [
            [
                "@babel/preset-env",
                {
                    targets: {
                        esmodules: true,
                    },
                    modules: false,
                },
            ],
            ["@babel/preset-react"],
            [
                "@babel/preset-typescript",
                {
                    allowNamespaces: true,
                    onlyRemoveTypeAnnotations: true,
                },
            ],
        ],
        plugins: [
            "@babel/plugin-transform-typescript",
            [
                "@babel/plugin-transform-react-jsx",
                {
                    throwIfNamespace: false, // defaults to true
                    runtime: _jsxSource === "preact" ? "classic" : "automatic",
                },
            ],
        ],
    });
    return {
        code: result === null || result === void 0 ? void 0 : result.code,
        map: result === null || result === void 0 ? void 0 : result.map,
        metadata: result === null || result === void 0 ? void 0 : result.metadata,
        ast: result === null || result === void 0 ? void 0 : result.ast,
    };
};
export default jsxCompiler;
//# sourceMappingURL=index.js.map