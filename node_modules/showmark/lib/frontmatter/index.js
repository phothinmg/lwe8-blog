import { load } from 'js-yaml';
/**
 * Finds indices of lines in a markdown file that contain a metadata delimiter.
 * @param mem An array of indices to be populated.
 * @param item A line of the markdown file.
 * @param i The index of the line in the markdown file.
 * @returns The updated array of indices.
 */
function findMetaIndices(mem, item, i) {
    // If the line starts with ---, it's a metadata delimiter
    if (/^---/.test(item)) {
        // Add the index of the line to the array of indices
        mem.push(i);
    }
    return mem;
}
/**
 * Extracts and parses metadata from a markdown file.
 *
 * @param linesPros An object containing `lines` and `metaIndices` properties.
 * - `lines`: An array of strings representing lines of a markdown file.
 * - `metaIndices`: An array of numbers marking the start and end of the metadata block.
 *
 * @returns A JSON object containing the parsed metadata if present, otherwise an empty object.
 */
function getData(linesPros) {
    var lines = linesPros.lines, metaIndices = linesPros.metaIndices;
    if (metaIndices.length > 0) {
        var dat = lines.slice(metaIndices[0] + 1, metaIndices[1]);
        var data = load(dat.join('\n'));
        return data;
    }
    return {};
}
/**
 * Returns the content of a markdown file as a string, optionally
 * skipping over a metadata block.
 *
 * If the file contains a metadata block, the content will be
 * everything after the second `---` delimiter. Otherwise, the
 * content will be the entire file.
 *
 * @param linesPros An object with `lines` and `metaIndices` properties.
 * @returns A string containing the content of the markdown file.
 */
function getContent(linesPros) {
    var lines = linesPros.lines, metaIndices = linesPros.metaIndices;
    return metaIndices.length > 0
        ? lines.slice(metaIndices[1] + 1).join('\n')
        : lines.join('\n');
}
/**
 * Extracts frontmatter data from a markdown string.
 *
 * @param mdcontent A string that contains markdown content.
 * @returns An object with two properties: data and content.
 * - data: A JSON object that contains the frontmatter data,
 *   parsed from the markdown string.
 * - content: A string that contains the remainder of the
 *   markdown content after the frontmatter has been stripped.
 */
export default function frontmatter(mdcontent) {
    var lines = mdcontent.split('\n');
    var metaIndices = lines.reduce(findMetaIndices, []);
    var data = getData({ lines: lines, metaIndices: metaIndices });
    var content = getContent({ lines: lines, metaIndices: metaIndices });
    return { data: data, content: content };
}
//# sourceMappingURL=index.js.map