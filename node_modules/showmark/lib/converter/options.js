import { customClass } from '../extensions/index.js';
/**
 * Gets the options for showdown. This function takes care of merging the
 * default options with the user-provided options.
 * @param {ShowMarkOptions} options The options to merge with the default options.
 * @returns {Object} An object with two properties, `sh_opts` and `sanitizeOptions`.
`sh_opts` is the merged options for showdown, and `sanitizeOptions` is the
user-provided options for sanitize-html.
 */
export default function getOptions(options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var dfext = [
        customClass(options === null || options === void 0 ? void 0 : options.customClassJsx),
    ];
    var flavor = (_a = options === null || options === void 0 ? void 0 : options.flavor) !== null && _a !== void 0 ? _a : 'github';
    var sh_opts = {
        backslashEscapesHTMLTags: false,
        completeHTMLDocument: false,
        customizedHeaderId: false,
        disableForced4SpacesIndentedSublists: false,
        ellipsis: false,
        emoji: true,
        encodeEmails: false,
        ghCodeBlocks: true,
        ghCompatibleHeaderId: false,
        ghMentions: true,
        literalMidWordUnderscores: false,
        metadata: true,
        noHeaderId: true,
        omitExtraWLInCodeBlocks: false,
        openLinksInNewWindow: (_c = (_b = options === null || options === void 0 ? void 0 : options.showdownOptions) === null || _b === void 0 ? void 0 : _b.openLinksInNewWindow) !== null && _c !== void 0 ? _c : false,
        parseImgDimensions: true,
        headerLevelStart: (_e = (_d = options === null || options === void 0 ? void 0 : options.showdownOptions) === null || _d === void 0 ? void 0 : _d.headerLevelStart) !== null && _e !== void 0 ? _e : 1,
        prefixHeaderId: false,
        rawHeaderId: false,
        rawPrefixHeaderId: false,
        requireSpaceBeforeHeadingText: true,
        simpleLineBreaks: (_g = (_f = options === null || options === void 0 ? void 0 : options.showdownOptions) === null || _f === void 0 ? void 0 : _f.simpleLineBreaks) !== null && _g !== void 0 ? _g : false,
        simplifiedAutoLink: true,
        smartIndentationFix: false,
        smoothLivePreview: false,
        splitAdjacentBlockquotes: false,
        strikethrough: true,
        tables: true,
        tablesHeaderId: false,
        tasklists: true,
        underline: true,
        extensions: dfext.concat((_j = (_h = options === null || options === void 0 ? void 0 : options.showdownOptions) === null || _h === void 0 ? void 0 : _h.extensions) !== null && _j !== void 0 ? _j : []),
    };
    return { sh_opts: sh_opts, sanitizeOptions: options === null || options === void 0 ? void 0 : options.sanitizeOptions, flavor: flavor };
}
//# sourceMappingURL=options.js.map