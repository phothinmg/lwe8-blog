var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import Showdown from 'showdown';
import frontmatter from '../frontmatter/index.js';
import { getOptions, sanitizeOutput, } from './index.js';
var Converter = /** @class */ (function (_super) {
    __extends(Converter, _super);
    function Converter(content, options) {
        var _this = _super.call(this, getOptions(options).sh_opts) || this;
        _this._sanOpts = getOptions(options).sanitizeOptions;
        _this._content = content;
        _this._rawContent = frontmatter(_this._content);
        _this._rawHtml = _this.makeHtml(_this._rawContent.content);
        _this.setFlavor(getOptions(options).flavor);
        return _this;
    }
    Object.defineProperty(Converter.prototype, "rawHtml", {
        /**
         * Returns the raw HTML converted by Showdown from the markdown content.
         * Does not include any frontmatter data.
         */
        get: function () {
            return this._rawHtml;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Converter.prototype, "cleanHtml", {
        /**
         * Returns the HTML converted by Showdown from the markdown content,
         * stripped of any unwanted HTML tags or attributes via the
         * `sanitize-html` library. Does not include any frontmatter data.
         */
        get: function () {
            return sanitizeOutput(this._rawHtml, this._sanOpts);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Converter.prototype, "metadata", {
        /**
         * Retrieves the metadata extracted from the frontmatter of the markdown content.
         * @returns The metadata as a JSON object of type T.
         */
        get: function () {
            return this._rawContent.data;
        },
        enumerable: false,
        configurable: true
    });
    return Converter;
}(Showdown.Converter));
export default Converter;
//# sourceMappingURL=converter.js.map